---
# tasks file for containerlab hosts

- name: Gather facts from the clab hosts
  ansible.builtin.setup:
    gather_subset:
      - '!all'

- name: Check if more than one containerlab host is defined
  set_fact:
    multinode: "{{ true if groups['SIMULATION'] | default([]) | length > 1 else false }}"
  run_once: true
  delegate_to: localhost

- name: Check if there is already a topology file with the same name
  stat:
    path: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}/{{inventory_hostname}}_{{ sim_topology_file_name }}.yml"
  register: stat_result

- name: Destroy the lab using containerlab in a container
  become: true
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }} \
    ghcr.io/srl-labs/clab clab destroy -t {{inventory_hostname}}_{{ sim_topology_file_name }}.yml --cleanup "
  when: containerlab_mode == 'container' and stat_result.stat.exists and containerlab_deploy_on_hosts

- name: Destroy the lab using installed containerlab
  become: true
  command: "clab destroy -t {{inventory_hostname}}_{{ sim_topology_file_name }}.yml --cleanup"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: containerlab_mode == 'installed' and stat_result.stat.exists and containerlab_deploy_on_hosts

- name: Delete vxlan interfaces which were used by the old lab
  become: true
  command: "bash {{ inventory_hostname }}_vxlan_interface_delete.sh"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: multinode and containerlab_deploy_on_hosts
  ignore_errors: true

- name: Remove containerlab directory on the containerlab host
  file:
    path: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
    state: absent
  become: true
  when: containerlab_deploy_on_hosts

- name: Create required directories on the containerlab host
  file:
    path: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
    state: directory
    mode: 0775
  when: containerlab_deploy_on_hosts

- name: Unarchive the containerlab files to the containerlab host
  unarchive:
    src: "{{ containerlab_dir }}/{{ inventory_hostname }}_tmp_containerlab_archive.tar.gz"
    dest: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: containerlab_deploy_on_hosts

- name: Delete vxlan interfaces which will be used by the new lab
  become: true
  command: "bash {{ inventory_hostname }}_vxlan_interface_delete.sh"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: multinode and containerlab_deploy_on_hosts
  ignore_errors: true

- name: Creating run parameters for containerlab deploy
  set_fact:
    containerlab_cmd: "\
    --reconfigure \
    {% if containerlab_max_workers is defined %} --max-workers {{ containerlab_max_workers }}{% endif %}\
    {% if containerlab_timeout is defined %} --timeout {{ containerlab_timeout }}{% endif %}\
    {% if containerlab_skip_post_deploy is defined %}{% if containerlab_skip_post_deploy %} --skip-post-deploy {% endif %}{% endif %}\
    {% if containerlab_debug is defined %}{% if containerlab_debug %} -d {% endif %}{% endif %}"
  delegate_to: localhost
  run_once: true
  when: containerlab_deploy_on_hosts

- name: Deploy the lab using containerlab in a container
  become: true
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }} \
    ghcr.io/srl-labs/clab clab deploy -t {{inventory_hostname}}_{{ sim_topology_file_name }}.yml {{ containerlab_cmd }} "
  when: containerlab_mode == 'container' and containerlab_deploy_on_hosts

- name: Run the containerlab vxlan commands (container clab)
  become: true
  command: "docker run \
    --rm \
    -it \
    --privileged \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/run/netns:/var/run/netns \
    -v /etc/hosts:/etc/hosts \
    --pid='host' \
    -v {{ ansible_facts.env.PWD }}:{{ ansible_facts.env.PWD }} \
    -w {{ ansible_facts.env.PWD }}/{{ containerlab_labname }} \
    ghcr.io/srl-labs/clab bash {{ inventory_hostname }}_vxlan_commands.sh "
  when: multinode and containerlab_mode == 'container' and containerlab_deploy_on_hosts

- name: Deploy the lab using installed containerlab
  become: true
  command: "clab deploy -t {{inventory_hostname}}_{{ sim_topology_file_name }}.yml {{ containerlab_cmd }} "
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: containerlab_mode == 'installed' and containerlab_deploy_on_hosts

- name: Run the containerlab vxlan commands (installed clab)
  become: true
  command: "bash {{ inventory_hostname }}_vxlan_commands.sh"
  args:
    chdir: "{{ ansible_facts.env.PWD }}/{{ containerlab_labname }}"
  when: multinode and containerlab_mode == 'installed' and containerlab_deploy_on_hosts
